/* The following code was generated by JFlex 1.4.1 on 3/12/14 19:05 */
/*
 * Copyright (c) 2014, Dries007
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 *  Neither the name of the project nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * 
 */

package net.dries007.j8051.gui;

import org.fife.ui.rsyntaxtextarea.AbstractJFlexTokenMaker;
import org.fife.ui.rsyntaxtextarea.Token;
import org.fife.ui.rsyntaxtextarea.TokenImpl;

import javax.swing.text.Segment;
import java.io.IOException;

/**
 * 2014/12/03
 * <p/>
 * Assembler8051TokenMaker.java - An object that can take a chunk of text and return a linked list of tokens representing 8051 assembler.
 * <p/>
 * This file was made for the project <a href="https://github.com/dries007/j8051">j8051</a>, and is specifically tailored towards the XC888 from Infineon
 * This file was made by modifying "Assembler8051TokenMaker", and uses the register list of an include file made by a teacher of mine (Roggemans M. aka MGM).
 * <p/>
 * This implementation was created using <a href="http://www.jflex.de/">JFlex</a> 1.4.1;
 * however, the generated file was modified for performance.
 * Memory allocation needs to be almost completely removed to be competitive with the handwritten lexers
 * (subclasses of <code>AbstractTokenMaker</code>, so this class has been modified so that Strings are never allocated (via yytext()),
 * and the scanner never has to worry about refilling its buffer (needlessly copying chars around).
 * We can achieve this because RText always scans exactly 1 line of tokens at a time, and hands the scanner this line as an array of characters (a Segment really).
 * Since tokens contain pointers to char arrays instead of Strings holding their contents, there is no need for allocating new memory for Strings.<p>
 * <p/>
 * The actual algorithm generated for scanning has, of course, not been modified.<p>
 * <p/>
 * <p/>
 * If you wish to regenerate this file yourself, keep in mind the following:
 * <ul>
 * <li>The generated Assembler8051TokenMaker.java</code> file will contain two
 * definitions of both <code>zzRefill</code> and <code>yyreset</code>.
 * You should hand-delete the second of each definition (the ones
 * generated by the lexer), as these generated methods modify the input
 * buffer, which we'll never have to do.</li>
 * <li>You should also change the declaration/definition of zzBuffer to NOT
 * be initialized.  This is a needless memory allocation for us since we
 * will be pointing the array somewhere else anyway.</li>
 * <li>You should NOT call <code>yylex()</code> on the generated scanner
 * directly; rather, you should use <code>getTokenList</code> as you would
 * with any other <code>TokenMaker</code> instance.</li>
 * </ul>
 * <p/>
 * I, Dries007, hereby grant the author of the RSyntaxTextArea library (Robert Futrell) the right to include this file into his library, even with changed licence header, provided that the following conditions are met:
 * <ul>
 * <li>I must be credited as creator of this file.</li>
 * <li>As long as the registers list is not rewritten to remove XC888 specific entries, 'Roggemans M. aka MGM' must be credited for the list.</li>
 * </ul>
 * <p/>
 * @author Dries007
 * @version 0.1
 */

public class Assembler8051TokenMaker extends AbstractJFlexTokenMaker
{

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 1
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\16\1\15\1\0\1\16\23\0\1\16\1\24\1\12\1\27" +
                    "\1\0\1\23\1\24\1\13\2\0\1\22\1\20\1\11\1\21\1\40" +
                    "\1\21\1\5\1\51\1\54\1\57\1\61\1\62\1\63\1\7\1\55" +
                    "\1\2\1\17\1\14\1\25\1\24\1\26\2\0\1\3\1\6\1\32" +
                    "\1\35\1\36\1\41\1\44\1\4\1\30\1\1\1\65\1\33\1\52" +
                    "\1\31\1\42\1\50\1\10\1\46\1\37\1\45\1\34\1\56\1\43" +
                    "\1\47\1\53\1\64\1\11\1\0\1\11\1\24\1\60\1\0\1\3" +
                    "\1\6\1\32\1\35\1\36\1\41\1\44\1\4\1\30\1\1\1\65" +
                    "\1\33\1\52\1\31\1\42\1\50\1\10\1\46\1\37\1\45\1\34" +
                    "\1\56\1\43\1\47\1\53\1\64\1\0\1\24\1\0\1\24\uff81\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\2\0\2\1\1\2\1\3\1\1\1\2\1\3\1\2" +
                    "\1\1\1\4\1\5\1\6\1\7\1\10\1\11\3\1" +

                    "\1\3\12\1\1\3\3\1\1\12\1\1\1\13\1\14" +

                    "\1\1\1\13\2\1\1\2\2\1\1\3\2\1\1\12" +
                    "\2\1\1\2\3\1\1\3\1\15\1\16\3\0\1\1" +
                    "\2\3\2\1\1\3\13\1\1\3\3\1\1\13\1\12" +
                    "\2\1\1\12\2\1\1\3\3\1\3\3\12\1\1\3" +
                    "\22\1\1\3\3\1\1\3\3\1\1\3\12\1\1\13" +
                    "\4\1\5\0\17\1\1\13\24\1\1\13\1\1\1\13" +

                    "\11\1\1\13\7\1\6\0\7\1\1\12\24\1\1\3" +
                    "\13\1\3\0\1\14\45\1\1\0\30\1\1\0\23\1" +

                    "\1\0\11\1\1\3\3\1\1\0\11\1\1\0\6\1" +

                    "\2\0\4\1\2\0\1\1\2\0";

    private static int[] zzUnpackAction()
    {
        int[] result = new int[385];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result)
    {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l)
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a" +
                    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\154\0\u02f4" +
                    "\0\154\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e" +

                    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e" +
                    "\0\u0654\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u072c\0\u0798" +
                    "\0\u021c\0\u07ce\0\u0804\0\u021c\0\u083a\0\u0870\0\u08a6\0\u08dc" +
                    "\0\u0912\0\u021c\0\u0948\0\u097e\0\u0804\0\u09b4\0\u09ea\0\u0a20" +
                    "\0\u0a56\0\154\0\154\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64" +
                    "\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14" +
                    "\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u021c" +
                    "\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u0db6" +
                    "\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182\0\u11b8" +
                    "\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332\0\u1368" +
                    "\0\u139e\0\u13d4\0\u140a\0\u0804\0\u1440\0\u1476\0\u14ac\0\u14e2" +
                    "\0\u1518\0\u154e\0\u1584\0\u11ee\0\u15ba\0\u15f0\0\u1626\0\u165c" +
                    "\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u0b64\0\u176a\0\u17a0\0\u17d6" +
                    "\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u17a0" +
                    "\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00" +
                    "\0\u1b36\0\u1008\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a" +
                    "\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a" +
                    "\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda" +
                    "\0\u2010\0\u2046\0\u0804\0\u207c\0\u20b2\0\u20e8\0\u11b8\0\u211e" +
                    "\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce" +
                    "\0\u2304\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e" +
                    "\0\u24b4\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e" +
                    "\0\u2664\0\u269a\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de" +
                    "\0\u2814\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e" +
                    "\0\u29c4\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e" +
                    "\0\u068a\0\u2b74\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8" +
                    "\0\u2cee\0\u2d24\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68" +

                    "\0\u2e9e\0\u2ed4\0\u2f0a\0\u2f40\0\u2f76\0\u0e22\0\u2fac\0\u2fe2" +
                    "\0\u3018\0\u304e\0\u3084\0\u30ba\0\u30f0\0\u3126\0\u315c\0\u3192" +
                    "\0\u31c8\0\u31fe\0\u3234\0\u326a\0\154\0\u32a0\0\u32d6\0\u330c" +
                    "\0\u3342\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u3450\0\u3486\0\u34bc" +
                    "\0\u34f2\0\u3528\0\u355e\0\u3594\0\u35ca\0\u3600\0\u3636\0\u366c" +
                    "\0\u36a2\0\u36d8\0\u370e\0\u3744\0\u377a\0\u37b0\0\u37e6\0\u381c" +
                    "\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a\0\u3960\0\u3996\0\u39cc" +
                    "\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada\0\u3b10\0\u3b46\0\u3b7c" +
                    "\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0\0\u3cf6\0\u3d2c" +
                    "\0\u3d62\0\u3d98\0\u3dce\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc" +
                    "\0\u3f12\0\u3f48\0\u3f7e\0\u3fb4\0\u3fea\0\u4020\0\u4056\0\u408c" +
                    "\0\u40c2\0\u40f8\0\u412e\0\u4164\0\u419a\0\u41d0\0\u4206\0\u423c" +
                    "\0\u4272\0\u42a8\0\u42de\0\u4314\0\u0a56\0\u434a\0\u4380\0\u43b6" +

                    "\0\u43ec\0\u4422\0\u4458\0\u448e\0\u44c4\0\u44fa\0\u4530\0\u4566" +
                    "\0\u459c\0\u2fac\0\u45d2\0\u4608\0\u463e\0\u4674\0\u46aa\0\u46e0" +
                    "\0\u4716\0\u474c\0\u4782\0\u47b8\0\u47ee\0\u4824\0\u485a\0\u4890" +
                    "\0\u48c6\0\u48fc\0\u4932\0\u4968\0\u499e\0\u49d4\0\u4a0a\0\u4a40" +
                    "\0\u4a76\0\u4aac\0\u4ae2\0\u4b18\0\u4b4e\0\u4b84\0\u4bba\0\u4bf0" +

                    "\0\u4c26";

    private static int[] zzUnpackRowMap()
    {
        int[] result = new int[385];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result)
    {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l)
        {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12" +
                    "\1\13\1\3\1\14\1\15\1\16\1\17\1\20\1\3" +
                    "\7\21\1\22\1\23\1\24\1\25\1\26\1\13\1\27" +
                    "\1\30\1\31\1\3\1\32\1\33\1\34\1\13\1\35" +
                    "\1\36\1\37\1\40\1\10\1\41\1\13\1\12\1\5" +
                    "\1\42\1\12\1\13\3\12\1\13\1\43\1\3\1\4" +
                    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\3" +
                    "\1\14\1\15\1\16\1\17\1\20\1\3\3\21\1\44" +
                    "\3\21\1\22\1\23\1\24\1\25\1\26\1\13\1\27" +
                    "\1\30\1\31\1\3\1\32\1\33\1\34\1\13\1\35" +
                    "\1\36\1\37\1\40\1\10\1\41\1\13\1\12\1\5" +
                    "\1\42\1\12\1\13\3\12\1\13\1\43\66\0\1\45" +
                    "\5\13\1\46\2\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\1\13\1\50\1\51\5\13\1\0\11\13\1\52" +
                    "\11\13\1\51\1\13\1\45\1\13\1\5\1\53\1\54" +

                    "\1\5\1\53\1\5\1\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\2\13\1\53\2\13\2\53\1\13\1\0" +
                    "\1\53\7\13\1\5\2\13\2\5\1\13\1\5\1\13" +
                    "\3\5\2\13\1\45\1\55\2\53\1\54\3\53\1\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\1\13\1\56" +
                    "\1\57\1\13\1\60\1\61\1\53\1\13\1\0\1\53" +
                    "\3\13\1\62\3\13\1\53\2\13\2\53\1\13\1\53" +
                    "\1\13\3\53\2\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\1\63\7\13\1\0\2\13\1\64" +
                    "\22\13\1\45\1\13\1\5\1\53\1\54\1\10\1\65" +

                    "\1\12\1\54\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\2\13\1\53\2\13\2\53\1\13\1\0\1\53\1\54" +
                    "\6\13\1\10\2\13\1\12\1\5\1\13\1\12\1\13" +

                    "\3\12\2\13\1\45\1\13\2\53\1\54\3\53\1\13" +

                    "\1\0\3\45\2\0\1\47\4\0\4\45\1\66\1\13" +

                    "\1\67\2\13\2\53\1\70\1\0\1\53\2\13\1\71" +
                    "\4\13\1\53\2\13\2\53\1\13\1\53\1\13\3\53" +
                    "\2\13\1\45\1\13\1\5\1\53\1\54\1\12\1\53" +
                    "\1\12\1\54\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\2\13\1\53\2\13\2\53\1\13\1\0\1\53\1\54" +
                    "\6\13\1\12\2\13\1\12\1\5\1\13\1\12\1\13" +

                    "\3\12\2\13\1\45\10\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\10\13\1\0\25\13\12\14\1\72\53\14" +
                    "\13\15\1\73\52\15\15\16\1\0\50\16\16\0\1\20" +
                    "\77\0\1\74\4\0\1\75\1\76\27\0\1\45\10\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\1\13\1\77" +

                    "\3\13\1\100\1\101\1\13\1\0\4\13\1\102\1\103" +
                    "\1\13\1\104\15\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\10\13\1\0\1\13\1\52\7\13" +
                    "\1\105\13\13\1\45\1\106\1\53\1\107\1\54\3\53" +

                    "\1\13\1\0\3\45\2\0\1\47\4\0\4\45\2\13" +
                    "\1\110\1\111\1\13\1\112\1\53\1\113\1\0\1\53" +
                    "\1\114\2\13\1\115\2\13\1\116\1\53\1\117\1\120" +

                    "\2\53\1\13\1\53\1\13\3\53\2\13\1\45\1\55" +
                    "\7\13\1\0\3\45\2\0\1\47\4\0\4\45\2\13" +

                    "\1\121\5\13\1\0\1\13\1\122\23\13\1\45\1\123" +

                    "\1\53\1\124\1\54\1\53\1\125\1\53\1\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\1\126\1\13\1\53" +
                    "\2\13\1\53\1\127\1\130\1\0\1\53\1\13\1\62" +

                    "\4\13\1\131\1\53\1\132\1\13\2\53\1\13\1\53" +
                    "\1\13\3\53\2\13\1\45\1\13\1\53\1\133\1\54" +

                    "\3\53\1\134\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\1\13\1\135\1\136\2\13\2\53\1\137\1\0\1\53" +
                    "\1\140\2\13\1\141\1\142\1\143\1\13\1\53\2\13" +

                    "\2\53\1\13\1\53\1\13\3\53\2\13\1\45\1\55" +
                    "\4\13\1\144\2\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\2\13\1\145\1\13\1\146\1\13\1\147\1\150" +
                    "\1\0\2\13\1\151\4\13\1\120\1\13\1\152\1\153" +
                    "\12\13\1\45\1\13\2\53\1\54\1\154\2\53\1\13" +

                    "\1\0\3\45\2\0\1\47\4\0\4\45\2\13\1\53" +
                    "\2\13\1\155\1\156\1\13\1\0\1\53\7\13\1\154" +

                    "\2\13\2\53\1\13\1\53\1\13\3\53\2\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\7\13" +

                    "\1\157\1\0\5\13\1\160\7\13\1\120\7\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\5\13" +
                    "\1\161\2\13\1\0\5\13\1\120\17\13\1\45\3\13" +

                    "\1\102\1\120\1\162\2\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\1\71\1\13\1\163\1\102\4\13\1\0" +

                    "\1\164\4\13\1\164\1\165\1\13\1\120\1\166\1\13" +
                    "\1\167\11\13\1\45\4\13\1\120\1\162\1\120\1\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\1\71\2\13" +

                    "\1\46\1\13\1\120\1\170\1\171\1\0\2\13\1\172" +

                    "\2\13\1\46\1\165\1\13\1\120\2\13\1\120\2\13" +
                    "\1\120\1\13\3\120\2\13\1\45\2\13\1\173\5\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\2\13\1\174" +

                    "\2\13\1\175\1\13\1\113\1\0\5\13\1\56\17\13" +

                    "\1\45\2\13\1\176\1\13\1\177\3\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\2\13\1\200\1\201\1\202" +
                    "\2\13\1\203\1\0\1\13\1\204\2\13\1\164\1\13" +
                    "\1\205\1\13\1\177\1\206\1\13\1\207\2\13\1\177" +
                    "\1\13\2\210\3\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\1\211\3\13\1\56\1\212\2\13" +

                    "\1\0\1\13\1\213\3\13\1\214\3\13\1\215\13\13" +
                    "\1\45\4\13\1\120\3\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\10\13\1\0\10\13\1\120\2\13\1\120" +
                    "\2\13\1\120\6\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\6\13\1\216\1\13\1\0\25\13" +

                    "\1\0\10\44\17\0\10\44\1\0\25\44\11\45\1\0" +
                    "\3\45\2\0\1\45\4\0\14\45\1\0\26\45\10\13" +

                    "\1\0\3\45\2\0\1\47\4\0\4\45\2\13\1\51" +
                    "\5\13\1\0\25\13\1\45\5\13\1\51\2\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\2\13\1\51\5\13" +

                    "\1\0\23\13\1\51\1\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\7\13\1\51" +
                    "\15\13\1\45\1\13\2\53\1\54\3\53\1\13\1\0" +

                    "\3\45\2\0\1\47\4\0\4\45\2\13\1\53\2\13" +

                    "\2\53\1\13\1\0\1\53\7\13\1\53\2\13\2\53" +
                    "\1\13\1\53\1\13\3\53\2\13\1\45\10\13\1\0" +

                    "\3\45\2\0\1\47\4\0\4\45\10\13\1\0\11\13" +
                    "\1\52\13\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\3\13\1\51\4\13\1\0\25\13\1\45" +

                    "\1\13\1\53\1\217\1\54\3\53\1\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\2\13\1\154\2\13\2\53" +
                    "\1\13\1\0\1\53\7\13\1\53\2\13\2\53\1\13" +
                    "\1\53\1\13\3\53\2\13\1\45\2\13\1\220\5\13" +

                    "\1\0\3\45\2\0\1\47\4\0\4\45\10\13\1\0" +
                    "\25\13\1\45\1\13\2\53\1\120\3\53\1\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\2\13\1\221\1\120" +

                    "\1\13\1\222\1\53\1\13\1\0\1\53\7\13\1\53" +
                    "\2\13\2\53\1\13\1\53\1\13\3\53\2\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +

                    "\1\0\3\13\1\223\21\13\1\45\5\13\1\224\2\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\10\13\1\0" +
                    "\25\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\10\13\1\0\4\13\1\62\20\13\1\45\1\13" +

                    "\2\53\1\54\3\53\1\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\2\13\1\53\2\13\2\53\1\13\1\0" +

                    "\1\53\1\225\6\13\1\53\2\13\2\53\1\13\1\53" +
                    "\1\13\3\53\2\13\1\45\10\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\6\13\1\226\1\13\1\0\12\13" +

                    "\1\120\12\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\10\13\1\0\10\13\1\120\14\13\31\0" +

                    "\1\227\7\0\1\230\62\0\1\231\60\0\1\232\1\0" +
                    "\1\233\32\0\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\2\13\1\51\5\13\1\0\4\13\1\234" +
                    "\20\13\1\45\2\13\1\235\5\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\10\13\1\0\25\13\1\45\4\13" +
                    "\1\120\3\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\1\13\1\102\6\13\1\0\5\13\1\236\2\13\1\120" +
                    "\14\13\1\45\4\13\1\120\3\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\10\13\1\0\10\13\1\120\14\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\2\13\1\237\2\13\1\240\2\13\1\0\25\13\1\45" +
                    "\3\13\1\71\4\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\10\13\1\0\10\13\1\120\14\13\1\45\10\13" +

                    "\1\0\3\45\2\0\1\47\4\0\4\45\1\241\7\13" +
                    "\1\0\25\13\1\45\10\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\1\13\1\242\6\13\1\0\25\13\1\45" +

                    "\1\13\2\53\1\54\3\53\1\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\1\13\1\243\1\53\2\13\2\53" +
                    "\1\13\1\0\1\53\7\13\1\53\2\13\2\53\1\13" +
                    "\1\53\1\13\3\53\2\13\1\45\1\13\2\53\1\54" +
                    "\3\53\1\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\2\13\1\53\1\13\1\244\2\53\1\13\1\0\1\53" +

                    "\7\13\1\53\2\13\2\53\1\13\1\53\1\13\3\53" +

                    "\2\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\10\13\1\0\5\13\1\51\17\13\1\45\1\13" +

                    "\2\53\1\54\3\53\1\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\2\13\1\53\2\13\2\53\1\13\1\0" +
                    "\1\53\7\13\1\53\2\13\2\53\1\13\1\53\1\245" +
                    "\3\53\2\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\6\13\1\226\1\13\1\0\25\13\1\45" +

                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\2\13" +
                    "\1\163\2\13\1\246\2\13\1\0\25\13\1\45\10\13" +

                    "\1\0\3\45\2\0\1\47\4\0\4\45\10\13\1\0" +

                    "\13\13\1\120\11\13\1\45\10\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\3\13\1\51\4\13\1\0\5\13" +

                    "\1\247\17\13\1\45\10\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\2\13\1\163\5\13\1\0\25\13\1\45" +
                    "\2\13\1\250\5\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\10\13\1\0\25\13\1\45\10\13\1\0\3\45" +

                    "\2\0\1\47\4\0\4\45\10\13\1\0\2\13\1\62" +
                    "\22\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\1\13\1\251\6\13\1\0\25\13\1\45\1\13" +

                    "\2\53\1\54\3\53\1\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\2\13\1\53\2\13\2\53\1\13\1\0" +
                    "\1\53\3\13\1\252\3\13\1\53\2\13\2\53\1\13" +
                    "\1\53\1\13\3\53\2\13\1\45\1\13\2\53\1\54" +

                    "\3\53\1\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\1\66\1\13\1\53\2\13\2\53\1\13\1\0\1\53" +

                    "\7\13\1\53\2\13\2\53\1\13\1\53\1\13\3\53" +
                    "\2\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\10\13\1\0\15\13\1\51\7\13\1\45\1\13" +

                    "\2\53\1\54\3\53\1\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\2\13\1\253\2\13\2\53\1\13\1\0" +
                    "\1\53\7\13\1\53\2\13\2\53\1\13\1\53\1\13" +
                    "\3\53\2\13\1\45\3\13\1\120\4\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\3\13\1\120\4\13\1\0" +
                    "\4\13\1\236\20\13\1\45\2\13\1\254\5\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\10\13\1\0\25\13" +

                    "\1\45\1\13\2\53\1\54\3\53\1\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\2\13\1\53\2\13\1\255" +

                    "\1\53\1\13\1\0\1\53\7\13\1\53\2\13\2\53" +
                    "\1\13\1\53\1\13\3\53\2\13\1\45\10\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\4\13\1\62\3\13" +
                    "\1\0\25\13\1\45\10\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\5\13\1\62\2\13\1\0\25\13\1\45" +

                    "\1\13\2\53\1\54\3\53\1\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\2\13\1\256\2\13\2\53\1\13" +
                    "\1\0\1\53\7\13\1\53\2\13\2\53\1\13\1\53" +

                    "\1\13\3\53\2\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\7\13\1\257\1\0\25\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\2\13" +
                    "\1\120\5\13\1\0\25\13\1\45\4\13\1\120\3\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\10\13\1\0" +
                    "\10\13\1\120\2\13\1\120\11\13\1\45\10\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\10\13\1\0\5\13" +

                    "\1\260\17\13\1\45\4\13\1\120\3\13\1\0\3\45" +

                    "\2\0\1\47\4\0\4\45\1\261\5\13\1\262\1\13" +
                    "\1\0\1\115\7\13\2\120\1\13\1\120\11\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\4\13" +

                    "\1\263\3\13\1\0\25\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\4\13\1\264\3\13\1\0" +

                    "\1\13\1\225\23\13\1\45\5\13\1\265\2\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\10\13\1\0\25\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\10\13\1\0\4\13\1\265\20\13\1\45\10\13\1\0" +

                    "\3\45\2\0\1\47\4\0\4\45\2\13\1\266\5\13" +
                    "\1\0\25\13\1\45\2\13\1\52\5\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\25\13\1\45" +
                    "\4\13\1\71\3\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\10\13\1\0\10\13\1\71\2\13\1\71\11\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\7\13\1\267\1\0\25\13\1\45\1\13\2\53\1\54" +

                    "\3\53\1\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\2\13\1\67\2\13\2\53\1\270\1\0\1\53\4\13" +
                    "\1\271\2\13\1\53\2\13\2\53\1\13\1\53\1\13" +
                    "\3\53\2\13\1\45\1\13\1\53\1\272\1\54\3\53" +
                    "\1\13\1\0\3\45\2\0\1\47\4\0\4\45\2\13" +

                    "\1\53\2\13\2\53\1\13\1\0\1\53\7\13\1\53" +

                    "\2\13\2\53\1\13\1\53\1\13\3\53\2\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\2\13" +
                    "\1\273\5\13\1\0\25\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\3\13\1\51\4\13\1\0" +

                    "\3\13\1\62\21\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\10\13\1\0\4\13\1\274\20\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\10\13\1\0\14\13\1\71\10\13\1\45\10\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\10\13\1\0\1\13" +

                    "\1\275\23\13\1\45\10\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\5\13\1\120\2\13\1\0\25\13\1\45" +

                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +
                    "\1\0\1\13\1\165\23\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\10\13\1\276" +
                    "\6\13\1\277\5\13\1\45\10\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\1\13\1\71\6\13\1\0\4\13" +
                    "\1\300\20\13\1\45\4\13\1\120\3\13\1\0\3\45" +

                    "\2\0\1\47\4\0\4\45\6\13\1\226\1\13\1\0" +
                    "\10\13\1\120\14\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\6\13\1\275\1\13\1\0\25\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\5\13\1\301\2\13\1\0\25\13\1\45\3\13\1\302" +
                    "\4\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +

                    "\1\0\25\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\5\13\1\257\1\13\1\303\1\0\25\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\10\13\1\0\17\13\1\304\5\13\1\45\10\13\1\0" +

                    "\3\45\2\0\1\47\4\0\4\45\2\13\1\305\5\13" +
                    "\1\0\1\13\1\275\23\13\1\45\10\13\1\0\3\45" +

                    "\2\0\1\47\4\0\4\45\3\13\1\273\4\13\1\0" +
                    "\25\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\7\13\1\306\1\0\25\13\1\45\10\13\1\0" +

                    "\3\45\2\0\1\47\4\0\4\45\7\13\1\257\1\0" +
                    "\2\13\1\120\22\13\1\45\10\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\10\13\1\0\5\13\1\307\1\13" +
                    "\1\51\15\13\1\45\4\13\1\120\3\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\10\13\2\120" +

                    "\1\13\1\120\11\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\2\13\1\310\5\13\1\0\25\13" +

                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\10\13\1\0\17\13\1\311\5\13\1\45\10\13\1\0" +

                    "\3\45\2\0\1\47\4\0\4\45\7\13\1\157\1\0" +
                    "\25\13\1\45\4\13\1\120\3\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\4\13\1\312\3\13\1\0\10\13" +
                    "\1\120\2\13\1\120\2\13\1\120\1\13\2\120\3\13" +

                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\5\13\1\313\2\13\1\0\15\13\1\314\7\13\1\45" +
                    "\4\13\1\120\3\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\10\13\1\0\10\13\1\120\2\13\1\120\2\13" +

                    "\1\120\1\13\2\120\3\13\1\45\5\13\1\315\2\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\1\316\1\13" +

                    "\1\317\2\13\1\236\1\13\1\236\1\0\2\13\1\320" +
                    "\22\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\6\13\1\321\1\13\1\0\25\13\1\45\1\13" +
                    "\2\53\1\54\3\53\1\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\2\13\1\53\1\56\1\13\2\53\1\13" +
                    "\1\0\1\53\7\13\1\53\2\13\2\53\1\13\1\53" +

                    "\1\13\3\53\2\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\5\13\1\102\2\13\1\0\25\13" +
                    "\1\45\1\13\2\53\1\54\3\53\1\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\2\13\1\53\2\13\2\53" +
                    "\1\13\1\0\1\53\1\275\6\13\1\53\2\13\2\53" +

                    "\1\13\1\53\1\322\3\53\2\13\1\45\3\13\1\62" +

                    "\4\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +
                    "\1\0\25\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\10\13\1\0\7\13\1\323\15\13\1\45" +

                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\1\13" +
                    "\1\71\6\13\1\0\25\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\3\13\1\62" +
                    "\21\13\32\0\1\324\64\0\1\325\3\0\1\326\71\0" +

                    "\1\327\61\0\1\330\67\0\1\331\26\0\1\45\4\13" +
                    "\1\120\3\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\10\13\1\0\10\13\1\120\6\13\1\172\5\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +
                    "\1\0\4\13\1\332\20\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\5\13\1\120" +

                    "\17\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\10\13\1\0\1\13\1\333\23\13\1\45\10\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\10\13\1\0" +
                    "\12\13\1\120\12\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\2\13\1\163\4\13\1\236\1\0" +
                    "\25\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\6\13\1\51\1\13\1\0\25\13\1\45\10\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\10\13\1\0" +
                    "\17\13\1\334\5\13\1\45\10\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\10\13\1\0\22\13\1\335\2\13" +

                    "\1\45\5\13\1\336\2\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\2\13\1\337\4\13\1\340\1\0\25\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\6\13\1\62\1\13\1\0\25\13\1\45\10\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\3\13\1\115\4\13" +
                    "\1\0\25\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\3\13\1\56\4\13\1\0\25\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +
                    "\1\0\23\13\1\51\1\13\1\45\2\13\1\341\5\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\10\13\1\0" +

                    "\25\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\10\13\1\0\7\13\1\120\15\13\1\45\1\13" +

                    "\2\53\1\54\3\53\1\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\2\13\1\154\2\13\2\53\1\13\1\0" +

                    "\1\53\7\13\1\53\2\13\2\53\1\13\1\53\1\13" +
                    "\3\53\2\13\1\45\1\13\2\53\1\54\3\53\1\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\1\342\1\13" +

                    "\1\53\2\13\2\53\1\13\1\0\1\53\7\13\1\53" +

                    "\2\13\2\53\1\13\1\53\1\13\3\53\2\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +
                    "\1\0\1\13\1\236\23\13\1\45\10\13\1\0\3\45" +

                    "\2\0\1\47\4\0\4\45\2\13\1\343\5\13\1\0" +

                    "\25\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\1\13\1\115\6\13\1\0\25\13\1\45\10\13" +

                    "\1\0\3\45\2\0\1\47\4\0\4\45\10\13\1\0" +
                    "\1\71\24\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\10\13\1\0\17\13\1\344\5\13\1\45" +

                    "\5\13\1\51\2\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\10\13\1\0\25\13\1\45\10\13\1\0\3\45" +

                    "\2\0\1\47\4\0\4\45\10\13\1\0\17\13\1\345" +
                    "\5\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\2\13\1\346\5\13\1\0\25\13\1\45\10\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\10\13\1\0" +
                    "\4\13\1\347\20\13\1\45\10\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\6\13\1\350\1\13\1\0\25\13" +
                    "\1\45\1\13\2\53\1\120\3\53\1\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\2\13\1\53\1\120\1\13" +
                    "\2\53\1\13\1\0\1\53\7\13\1\53\2\13\2\53" +
                    "\1\13\1\53\1\13\3\53\2\13\1\45\10\13\1\0" +

                    "\3\45\2\0\1\47\4\0\4\45\10\13\1\0\17\13" +
                    "\1\117\5\13\1\45\3\13\1\120\4\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\2\13\1\163\1\120\4\13" +

                    "\1\0\2\13\1\351\2\13\1\352\17\13\1\45\10\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\1\13\1\120" +
                    "\6\13\1\0\25\13\1\45\10\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\10\13\1\0\17\13\1\277\5\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\10\13\1\0\4\13\1\353\1\354\17\13\1\45\10\13" +

                    "\1\0\3\45\2\0\1\47\4\0\4\45\1\51\7\13" +
                    "\1\0\25\13\1\45\10\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\5\13\1\355\2\13\1\0\25\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\5\13" +
                    "\1\51\2\13\1\0\25\13\1\45\10\13\1\0\3\45" +

                    "\2\0\1\47\4\0\4\45\7\13\1\356\1\0\25\13" +

                    "\1\45\2\13\1\357\5\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\5\13\1\360\2\13\1\0\1\13\1\165" +

                    "\5\13\1\361\15\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\1\342\7\13\1\0\25\13\1\45" +

                    "\3\13\1\51\4\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\10\13\1\0\25\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\4\13\1\264" +

                    "\20\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\10\13\1\0\1\13\1\362\23\13\1\45\10\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\5\13\1\360" +
                    "\2\13\1\0\7\13\1\361\15\13\1\45\10\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\2\13\1\163\4\13" +
                    "\1\363\1\0\25\13\1\45\10\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\7\13\1\364\1\0\7\13\1\365" +

                    "\15\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\2\13\1\51\5\13\1\0\6\13\1\51\16\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\10\13\1\0\7\13\1\316\15\13\1\45\10\13\1\0" +

                    "\3\45\2\0\1\47\4\0\4\45\2\13\1\236\5\13" +
                    "\1\0\25\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\10\13\1\0\5\13\1\366\17\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +
                    "\1\0\5\13\1\367\17\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\7\13\1\370" +

                    "\15\13\1\45\7\13\1\371\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\1\372\1\13\1\373\1\374\2\13\1\375" +
                    "\1\13\1\0\3\13\1\376\1\13\1\377\1\13\1\u0100" +
                    "\5\13\1\u0101\7\13\1\45\10\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\5\13\1\236\1\13\1\236\1\0" +
                    "\25\13\33\0\1\u0102\67\0\1\326\66\0\1\u0103\57\0" +

                    "\1\u0104\65\0\1\u0103\73\0\1\u0105\27\0\1\45\2\13" +

                    "\1\62\5\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\10\13\1\0\25\13\1\45\10\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\1\13\1\u0106\6\13\1\0\25\13" +
                    "\1\45\5\13\1\336\2\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\10\13\1\0\25\13\1\45\10\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\10\13\1\0\17\13" +
                    "\1\u0107\5\13\1\45\10\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\7\13\1\240\1\0\25\13\1\45\10\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\10\13\1\0" +

                    "\1\13\1\u0108\23\13\1\45\10\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\10\13\1\0\4\13\1\u0109\20\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\10\13\1\0\7\13\1\42\15\13\1\45\10\13\1\0" +

                    "\3\45\2\0\1\47\4\0\4\45\10\13\1\0\1\13" +
                    "\1\u010a\23\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\10\13\1\0\7\13\1\u010b\15\13\1\45" +

                    "\5\13\1\u010c\2\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\2\13\1\u010d\5\13\1\0\4\13\2\u010e\1\13" +

                    "\1\u010f\15\13\1\45\10\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\10\13\1\0\1\13\1\u0110\23\13\1\45" +

                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\6\13" +
                    "\1\u0111\1\13\1\0\25\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\7\13\1\71\1\0\25\13" +

                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\1\u0112\7\13\1\0\25\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\6\13\1\u0113\1\13\1\0" +

                    "\25\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\10\13\1\0\13\13\1\u0114\11\13\1\45\10\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\2\13\1\u0115" +
                    "\5\13\1\0\25\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\10\13\1\0\5\13\1\u0116\17\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\10\13\1\0\2\13\1\165\22\13\1\45\10\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\3\13\1\u0117\4\13" +

                    "\1\0\25\13\1\45\2\13\1\u0118\5\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\1\236\7\13\1\0\25\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\4\13\1\u0119\3\13\1\0\25\13\1\45\10\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\1\13\1\164\6\13" +
                    "\1\0\25\13\1\45\10\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\10\13\1\0\4\13\1\u011a\20\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\4\13" +

                    "\1\u011b\3\13\1\0\25\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\1\u011c\7\13\1\0\25\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\10\13\1\0\10\13\1\120\2\13\1\120\11\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +

                    "\1\0\6\13\1\120\3\13\1\120\10\13\1\120\1\13" +
                    "\1\45\4\13\1\u011d\1\u011e\2\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\1\u011f\6\13\1\u011d\1\0\11\13" +
                    "\1\u011d\13\13\1\45\10\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\1\13\1\u0120\6\13\1\0\25\13\1\45" +

                    "\3\13\1\u0121\4\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\10\13\1\0\5\13\1\u0122\17\13\1\45\10\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\2\13\1\u0123" +

                    "\5\13\1\0\25\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\10\13\1\0\4\13\1\u0124\10\13" +
                    "\1\u0125\7\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\3\13\1\u0126\4\13\1\0\25\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\2\13" +

                    "\1\u0127\3\13\1\u0128\1\13\1\0\25\13\1\45\2\13" +
                    "\1\u0129\5\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\10\13\1\0\5\13\1\u012a\17\13\1\45\10\13\1\0" +

                    "\3\45\2\0\1\47\4\0\4\45\10\13\1\0\1\316" +
                    "\24\13\34\0\1\u012b\72\0\1\u0105\55\0\1\331\34\0" +

                    "\1\45\4\13\1\120\3\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\10\13\1\0\10\13\1\120\2\13\1\120" +

                    "\2\13\1\120\1\13\1\120\4\13\1\45\10\13\1\0" +

                    "\3\45\2\0\1\47\4\0\4\45\1\u012c\1\13\1\u012d" +
                    "\5\13\1\0\4\13\1\u012e\2\13\1\u012f\1\13\1\u0130" +

                    "\13\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\1\13\1\120\6\13\1\0\5\13\1\u0131\17\13" +

                    "\1\45\2\13\1\u0132\5\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\10\13\1\0\25\13\1\45\10\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\1\13\1\102\6\13" +

                    "\1\0\25\13\1\45\2\13\1\u0129\5\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\25\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +

                    "\1\0\5\13\1\u0133\17\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\1\13\1\u0134" +
                    "\23\13\1\45\5\13\1\u0113\2\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\10\13\1\0\25\13\1\45\10\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\1\u0135\7\13" +
                    "\1\0\25\13\1\45\10\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\1\13\1\u0136\6\13\1\0\25\13\1\45" +

                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +
                    "\1\0\7\13\1\71\15\13\1\45\10\13\1\0\3\45" +

                    "\2\0\1\47\4\0\4\45\1\13\1\u0137\6\13\1\0" +
                    "\25\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\3\13\1\120\4\13\1\0\25\13\1\45\3\13" +

                    "\1\120\4\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\2\13\1\163\1\120\4\13\1\0\11\13\1\166\13\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\10\13\1\0\13\13\1\u0133\11\13\1\45\3\13\1\120" +
                    "\4\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +

                    "\1\0\25\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\10\13\1\0\4\13\1\u0138\20\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +
                    "\1\0\4\13\1\u0139\20\13\1\45\10\13\1\0\3\45" +

                    "\2\0\1\47\4\0\4\45\5\13\1\u013a\2\13\1\0" +
                    "\25\13\1\45\2\13\1\u013b\5\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\10\13\1\0\25\13\1\45\10\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\7\13\1\254" +

                    "\1\0\25\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\7\13\1\u013c\1\0\25\13\1\45\10\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\10\13\1\0" +
                    "\5\13\1\u0136\17\13\1\45\10\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\4\13\1\u011d\3\13\1\0\25\13" +

                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\1\13\1\u011d\6\13\1\0\25\13\1\45\10\13\1\0" +

                    "\3\45\2\0\1\47\4\0\4\45\10\13\1\0\7\13" +

                    "\1\u013d\15\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\1\u013e\1\13\1\u013f\5\13\1\0\25\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\2\13\1\u0140\5\13\1\0\7\13\1\u0140\1\13\1\u0140" +

                    "\13\13\1\45\5\13\1\236\2\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\10\13\1\0\25\13\1\45\10\13" +

                    "\1\0\3\45\2\0\1\47\4\0\4\45\10\13\1\0" +

                    "\5\13\1\316\17\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\1\u013e\7\13\1\0\25\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +

                    "\1\0\1\13\1\u0141\23\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\5\13\1\42" +

                    "\17\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\7\13\1\u0142\1\0\25\13\1\45\10\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\10\13\1\0\3\13" +
                    "\1\u0143\21\13\1\45\2\13\1\236\5\13\1\0\3\45" +

                    "\2\0\1\47\4\0\4\45\10\13\1\0\25\13\35\0" +
                    "\1\u0144\30\0\1\45\10\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\1\13\1\u0145\4\13\1\u0134\1\u0146\1\0" +
                    "\25\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\2\13\1\u0147\5\13\1\0\11\13\1\u0148\13\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\2\13\1\u0149\5\13\1\0\5\13\1\u014a\2\13\1\u014b" +
                    "\14\13\1\45\2\13\1\u0129\5\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\1\u014c\6\13\1\u014d\1\0\25\13" +

                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\2\13\1\u014e\5\13\1\0\1\13\1\u014f\23\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\5\13" +
                    "\1\u0150\2\13\1\0\25\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\4\13\1\257" +
                    "\20\13\1\45\3\13\1\120\4\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\3\13\1\120\4\13\1\0\25\13" +

                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\1\13\1\u0133\6\13\1\0\25\13\1\45\10\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\7\13\1\352\1\0" +

                    "\25\13\1\45\4\13\1\120\3\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\10\13\1\0\25\13\1\45\5\13" +
                    "\1\120\2\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\10\13\1\0\25\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\7\13\1\u0151\1\0\25\13\1\45" +

                    "\2\13\1\120\5\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\10\13\1\0\25\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\6\13\1\275\1\352\1\0" +

                    "\25\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\10\13\1\0\4\13\1\120\20\13\1\45\10\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\6\13\1\u0152" +
                    "\1\13\1\0\25\13\1\45\10\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\2\13\1\u011d\5\13\1\0\25\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\1\13\1\u0153\6\13\1\0\25\13\1\45\10\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\10\13\1\0\4\13" +
                    "\1\u0154\20\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\10\13\1\0\5\13\1\u0155\17\13\1\45" +
                    "\5\13\1\u0156\2\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\10\13\1\0\25\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\5\13\1\u0157" +

                    "\17\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\6\13\1\120\1\13\1\0\25\13\36\0\1\u0158" +

                    "\27\0\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\10\13\1\0\7\13\1\u0133\15\13\1\45\3\13" +
                    "\1\120\4\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\3\13\1\120\3\13\1\u0133\1\0\5\13\1\u0133\17\13" +

                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\10\13\1\0\22\13\1\u0159\2\13\1\45\10\13\1\0" +

                    "\3\45\2\0\1\47\4\0\4\45\10\13\1\0\7\13" +

                    "\1\u015a\15\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\10\13\1\0\4\13\1\u015b\20\13\1\45" +

                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +
                    "\1\0\7\13\1\u015c\15\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\13\13\1\u015d" +

                    "\2\13\1\u015e\6\13\1\45\10\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\7\13\1\u015f\1\0\25\13\1\45" +

                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\3\13" +
                    "\1\236\4\13\1\0\25\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\11\13\1\u0160" +
                    "\13\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\5\13\1\u015c\2\13\1\0\25\13\1\45\10\13" +

                    "\1\0\3\45\2\0\1\47\4\0\4\45\10\13\1\0" +
                    "\6\13\1\u0133\3\13\1\u0133\10\13\1\u0133\1\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\6\13" +

                    "\1\u0161\1\13\1\0\25\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\3\13\1\u0162\4\13\1\0" +

                    "\25\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\2\13\1\236\4\13\1\236\1\0\1\236\6\13" +
                    "\1\236\15\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\10\13\1\0\5\13\1\u0163\17\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\2\13" +

                    "\1\u0164\4\13\1\u0164\1\0\25\13\1\45\2\13\1\u0165" +
                    "\1\13\1\u0133\3\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\10\13\1\0\10\13\1\u0133\2\13\1\u0133\2\13" +
                    "\1\u0133\6\13\37\0\1\u0166\26\0\1\45\4\13\1\u0167" +

                    "\3\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +
                    "\1\0\10\13\1\u0167\2\13\1\u0167\2\13\1\u0167\6\13" +

                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +
                    "\7\13\1\u0168\1\0\11\13\1\u0169\13\13\1\45\10\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\10\13\1\0" +
                    "\5\13\1\u016a\17\13\1\45\10\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\2\13\1\u016b\5\13\1\0\25\13" +

                    "\1\45\3\13\1\120\4\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\3\13\1\120\1\13\1\u016c\2\13\1\0" +
                    "\7\13\1\u010c\1\13\1\u016d\13\13\1\45\3\13\1\120" +
                    "\4\13\1\0\3\45\2\0\1\47\4\0\4\45\3\13" +

                    "\1\120\4\13\1\0\7\13\1\u010c\15\13\1\45\10\13" +
                    "\1\0\3\45\2\0\1\47\4\0\4\45\6\13\1\u016e" +

                    "\1\13\1\0\25\13\1\45\10\13\1\0\3\45\2\0" +

                    "\1\47\4\0\4\45\2\13\1\u0164\5\13\1\0\1\13" +

                    "\1\u016f\23\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\3\13\1\102\4\13\1\0\25\13\1\45" +

                    "\4\13\1\120\1\13\1\120\1\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\10\13\1\0\10\13\1\120\2\13" +
                    "\1\120\2\13\1\120\1\13\3\120\2\13\1\45\10\13" +

                    "\1\0\3\45\2\0\1\47\4\0\4\45\10\13\1\0" +
                    "\4\13\1\236\20\13\1\45\4\13\1\u0133\3\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\10\13\1\0\10\13" +

                    "\1\u0133\2\13\1\u0133\2\13\1\u0133\6\13\20\0\1\u0170" +

                    "\45\0\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\7\13\1\u010c\1\0\5\13\1\u0133\17\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +
                    "\1\0\4\13\1\u0171\20\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\1\13\1\u0172" +
                    "\23\13\1\45\4\13\1\u0133\3\13\1\0\3\45\2\0" +
                    "\1\47\4\0\4\45\10\13\1\0\13\13\1\u0133\4\13" +

                    "\1\u0133\4\13\1\45\10\13\1\0\3\45\2\0\1\47" +
                    "\4\0\4\45\10\13\1\0\4\13\1\u010c\20\13\1\45" +
                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +
                    "\1\0\4\13\1\u0173\20\13\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\7\13\1\u0174\1\0\25\13" +
                    "\1\45\10\13\1\0\3\45\2\0\1\47\4\0\4\45" +

                    "\3\13\1\u0175\4\13\1\0\25\13\1\45\10\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\4\13\1\u0176\3\13" +
                    "\1\0\25\13\12\0\1\u0177\12\0\1\u0178\40\0\1\45" +
                    "\2\13\1\u0179\5\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\10\13\1\0\25\13\1\45\10\13\1\0\3\45" +

                    "\2\0\1\47\4\0\4\45\5\13\1\u017a\2\13\1\0" +

                    "\25\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +

                    "\4\45\2\13\1\u0133\5\13\1\0\25\13\1\45\10\13" +

                    "\1\0\3\45\2\0\1\47\4\0\4\45\6\13\1\u017b" +
                    "\1\13\1\0\25\13\1\45\4\13\1\u0133\3\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\10\13\1\0\13\13" +

                    "\1\120\11\13\1\45\10\13\1\0\3\45\2\0\1\47" +

                    "\4\0\4\45\10\13\1\0\4\13\1\u017c\20\13\40\0" +
                    "\1\u017d\65\0\1\u017e\25\0\1\45\10\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\10\13\1\0\4\13\1\u0133" +

                    "\20\13\1\45\10\13\1\0\3\45\2\0\1\47\4\0" +
                    "\4\45\1\u017f\7\13\1\0\25\13\1\45\10\13\1\0" +
                    "\3\45\2\0\1\47\4\0\4\45\3\13\1\u0133\4\13" +

                    "\1\0\25\13\1\45\3\13\1\120\4\13\1\0\3\45" +
                    "\2\0\1\47\4\0\4\45\3\13\1\120\3\13\1\u0133" +
                    "\1\0\25\13\22\0\1\u0180\65\0\1\u0181\43\0\1\45" +

                    "\10\13\1\0\3\45\2\0\1\47\4\0\4\45\10\13" +

                    "\1\0\1\u0133\24\13\12\0\1\u0105\101\0\1\u0105\37\0";

    private static int[] zzUnpackTrans()
    {
        int[] result = new int[19548];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result)
    {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l)
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH      = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unkown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\2\0\1\11\13\1\1\11\1\1\1\11\50\1\2\11" +
                    "\3\0\130\1\5\0\70\1\6\0\50\1\3\0\1\11" +

                    "\45\1\1\0\30\1\1\0\23\1\1\0\15\1\1\0" +
                    "\11\1\1\0\6\1\2\0\4\1\2\0\1\1\2\0";

    private static int[] zzUnpackAttribute()
    {
        int[] result = new int[385];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result)
    {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l)
        {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

  /* user code: */

    /**
     * Constructor.  We must have this here as JFLex does not generate a
     * no parameter constructor.
     */
    public Assembler8051TokenMaker()
    {
        super();
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int tokenType)
    {
        addToken(zzStartRead, zzMarkedPos - 1, tokenType);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param tokenType The token's type.
     */
    private void addToken(int start, int end, int tokenType)
    {
        int so = start + offsetShift;
        addToken(zzBuffer, start, end, tokenType, so);
    }

    /**
     * Adds the token specified to the current linked list of tokens.
     *
     * @param array       The character array.
     * @param start       The starting offset in the array.
     * @param end         The ending offset in the array.
     * @param tokenType   The token's type.
     * @param startOffset The offset in the document at which this token
     *                    occurs.
     */
    @Override
    public void addToken(char[] array, int start, int end, int tokenType, int startOffset)
    {
        super.addToken(array, start, end, tokenType, startOffset);
        zzStartRead = zzMarkedPos;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String[] getLineCommentStartAndEnd(int languageIndex)
    {
        return new String[]{";", null};
    }

    /**
     * Returns the first token in the linked list of tokens generated
     * from <code>text</code>.  This method must be implemented by
     * subclasses so they can correctly implement syntax highlighting.
     *
     * @param text             The text from which to get tokens.
     * @param initialTokenType The token type we should start with.
     * @param startOffset      The offset into the document at which
     *                         <code>text</code> starts.
     * @return The first <code>Token</code> in a linked list representing
     * the syntax highlighted text.
     */
    public Token getTokenList(Segment text, int initialTokenType, int startOffset)
    {

        resetTokenList();
        this.offsetShift = -text.offset + startOffset;

        // Start off in the proper state.
        int state = Token.NULL;
        switch (initialTokenType)
        {
            default:
                state = Token.NULL;
        }

        s = text;
        try
        {
            yyreset(zzReader);
            yybegin(state);
            return yylex();
        }
        catch (IOException ioe)
        {
            ioe.printStackTrace();
            return new TokenImpl();
        }

    }

    /**
     * Refills the input buffer.
     *
     * @return <code>true</code> if EOF was reached, otherwise
     * <code>false</code>.
     * @throws IOException if any I/O-Error occurs.
     */
    private boolean zzRefill() throws java.io.IOException
    {
        return zzCurrentPos >= s.offset + s.count;
    }

    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p/>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>YY_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) throws java.io.IOException
    {
        // 's' has been updated.
        zzBuffer = s.array;
        /*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
        //zzStartRead = zzEndRead = s.offset;
        zzStartRead = s.offset;
        zzEndRead = zzStartRead + s.count - 1;
        zzCurrentPos = zzMarkedPos = s.offset;
        zzLexicalState = YYINITIAL;
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
    }

    /**
     * Creates a new scanner
     * There is also a java.io.InputStream version of this constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    public Assembler8051TokenMaker(java.io.Reader in)
    {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner.
     * There is also java.io.Reader version of this constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    public Assembler8051TokenMaker(java.io.InputStream in)
    {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed)
    {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 200)
        {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException
    {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate()
    {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */

    public final void yybegin(int newState)
    {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext()
    {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p/>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos)
    {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength()
    {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     * <p/>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p/>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode)
    {
        String message;
        try
        {
            message = ZZ_ERROR_MSG[errorCode];
        }
        catch (ArrayIndexOutOfBoundsException e)
        {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p/>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number)
    {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException
    {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true)
        {
            zzMarkedPosL = zzMarkedPos;

            if (zzMarkedPosL > zzStartRead)
            {
                switch (zzBufferL[zzMarkedPosL - 1])
                {
                    case '\n':
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        zzAtBOL = true;
                        break;
                    case '\r':
                        if (zzMarkedPosL < zzEndReadL)
                            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
                        else if (zzAtEOF)
                            zzAtBOL = false;
                        else
                        {
                            boolean eof = zzRefill();
                            zzMarkedPosL = zzMarkedPos;
                            zzEndReadL = zzEndRead;
                            zzBufferL = zzBuffer;
                            if (eof)
                                zzAtBOL = false;
                            else
                                zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
                        }
                        break;
                    default:
                        zzAtBOL = false;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            if (zzAtBOL)
                zzState = ZZ_LEXSTATE[zzLexicalState + 1];
            else
                zzState = ZZ_LEXSTATE[zzLexicalState];

            zzForAction:
            {
                while (true)
                {

                    if (zzCurrentPosL < zzEndReadL)
                        zzInput = zzBufferL[zzCurrentPosL++];
                    else if (zzAtEOF)
                    {
                        zzInput = YYEOF;
                        break zzForAction;
                    }
                    else
                    {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof)
                        {
                            zzInput = YYEOF;
                            break zzForAction;
                        }
                        else
                        {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1)
                    {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction])
            {
                case 11:
                {
                    addToken(Token.RESERVED_WORD);
                }

                case 15:
                    break;
                case 1:
                {
                    addToken(Token.IDENTIFIER);
                }

                case 16:
                    break;
                case 13:
                {
                    addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
                }

                case 17:
                    break;
                case 10:
                {
                    addToken(Token.FUNCTION);
                }

                case 18:
                    break;
                case 6:
                {
                    addToken(Token.COMMENT_EOL);
                    addNullToken();
                    return firstToken;
                }
                case 19:
                    break;
                case 8:
                {
                    addToken(Token.WHITESPACE);
                }
                case 20:
                    break;

                case 3:
                {
                    addToken(Token.VARIABLE);
                }
                case 21:
                    break;

                case 12:
                {
                    addToken(Token.PREPROCESSOR);
                }

                case 22:
                    break;
                case 5:
                {
                    addToken(Token.ERROR_CHAR); /*addNullToken(); return firstToken;*/
                }

                case 23:
                    break;
                case 9:
                {
                    addToken(Token.OPERATOR);
                }

                case 24:
                    break;
                case 2:
                {
                    addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
                }

                case 25:
                    break;
                case 14:
                {
                    addToken(Token.LITERAL_CHAR);
                }

                case 26:
                    break;
                case 4:
                {
                    addToken(Token.ERROR_STRING_DOUBLE);
                    addNullToken();
                    return firstToken;
                }

                case 27:
                    break;
                case 7:
                {
                    addNullToken();
                    return firstToken;
                }

                case 28:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos)
                    {
                        zzAtEOF = true;
                        switch (zzLexicalState)
                        {
                            case YYINITIAL:
                            {
                                addNullToken();
                                return firstToken;
                            }
                            case 386:
                                break;
                            default:
                                return null;
                        }
                    }
                    else
                    {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }

}
